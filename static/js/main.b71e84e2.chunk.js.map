{"version":3,"sources":["logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","src","logo","href","class","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kNC+BzBC,MA5Bf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAGlBH,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,MAAOL,EAAAC,EAAAC,cAAA,WACjBF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,2CAAR,OAFA,oLAKAN,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WALL,yOASkCF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,KAAR,yBATlC,wCAUeN,EAAAC,EAAAC,cAAA,KAAGI,KAAK,6BAAR,eAVf,KAUoEN,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAVzE,+EAaAF,EAAAC,EAAAC,cAAA,KAAGI,KAAK,KAAR,WAbA,IAawBN,EAAAC,EAAAC,cAAA,QAAMK,MAAM,SAAZ,SAA6BP,EAAAC,EAAAC,cAAA,KAAGI,KAAK,KAAR,UAbrD,IAa4EN,EAAAC,EAAAC,cAAA,QAAMK,MAAM,SAAZ,SAb5E,IAa0GP,EAAAC,EAAAC,cAAA,KAAGI,KAAK,KAAR,mBAb1G,+EAeAN,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACLF,EAAAC,EAAAC,cAAA,QAAMM,GAAG,UAAT,iCAA2CR,EAAAC,EAAAC,cAAA,KAAGI,KAAK,sBAAR,WAA3C,2CAAiHN,EAAAC,EAAAC,cAAA,KAAGI,KAAK,sBAAR,iBCbnGG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b71e84e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.210765ae.png\";","import React from 'react';\nimport './App.css';\nimport logo from './logo.png';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\"> \n       \n      </header>\n      <section>\n      <img src={logo}/><br/>\n      <a href=\"https://github.com/Ryhazerus/lox.spaces\">Lox</a> is a (soon to be) community-operated physical place, where people share their interest in tinkering with technology, \n      meet and work on their projects, and learn from each other.\n      \n      <br/><br/>\n      Lox is an informal community space, \n      maintaining community services - including a wiki for everyone who wants to share \n      their Lox stories and questions, mailing lists, Github projects, a blog and a \n      feed aggregator, and many others. <a href=\"#\">From around the world</a>, hackers meet on the \n      Discord server <a href=\"https://discord.gg/FRgvDe\">#lox.spaces</a>. <br/><br/>\n\n      ----------------------------------------------------------------------------\n      <a href=\"#\">Join Us</a> <span class=\"green\">» </span><a href=\"#\">Forums</a> <span class=\"green\">» </span> <a href=\"#\">Github Projects</a> \n      ----------------------------------------------------------------------------\n      <br/><br/>\n      <span id=\"footer\">CC 2019-2020 lox.space — <a href=\"https://google.com\">twitter</a> — zahyr.seferina@gmail.com — <a href=\"https://google.com\">donations</a></span>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}